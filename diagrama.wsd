@startuml Clases

class Casilla {
    - simbolo: char
    - esEditable: bool

    + Casilla(_simbolo: char)
    + Casilla()
    + asignarSimbolo(simbolo: char): void
    + bloquear(): void
    + obtenerSimbolo(): char
}

class Tablero {
    - <<final>> fila: int
    - <<final>> columna: int
    - casillas: Casilla[][]

    + Tablero()
    + obtenerTablero(): Casilla[][]
    + pintarTablero(): void
    - bloquearCasillas(): void
}

class Game {
    - tablero: Tablero
    - jugadores: LinkedList<Jugador>
}

class Jugador {
    - nombre: String
    - fichas: LinkedList<Ficha>
    - movimientos: int
    + obtenerNombre(): String
    + obtenerMovimientos(): int
    + aumentarMov(): void
}

class ManejadorFichas {
    - fichas: LinkedList<Ficha>
}

class Ficha {
    - simbolo: char
    - puntos: int

    + Ficha()
    + Ficha(_simbolo: char, _puntos: int)
    + obtenerPuntos(): int
    + obtenerSimbolo(): char
}

class Reporte {


}

struct Node<T> {
    + valor : T
    + siguiente : Node*
}

class LinkedList<T> {
    - front: Node
    - _size : int

    + LinkedList()
    + empty() : bool
    + size() : int
    + search (index : int): T
    + deleteAtHead() : void
    + deleteAtEnd() : void
    + insertAtHead(data: T) : void
    + insertAtEnd(data : T) : void
    + deleteAt(index : int): bool
}


class Queue<T> {
    - front : Node
    - _size : int

    + Queue()
    + enqueue(data : T) : void
    + dequeue() : T
    + peek() : T
    + empty() : bool
    + size() : int
}

class GestionArchivos {
    - path: String;

    + leerArchivo();
}

ManejadorFichas o-- "*" Ficha : contiene varias
Game *-- "2..*" Jugador : contiene
Tablero o-- "*" Casilla: contiene varias
Game --> Tablero
Jugador *-- ManejadorFichas
Game --> Reporte
Game -- LinkedList
ManejadorFichas -- LinkedList
Reporte -- LinkedList
LinkedList *-- Node : contiene un
Queue *-- Node : contiene un

@enduml
